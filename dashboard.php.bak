<?php
session_start();
require_once 'config.php';

// Verify user authentication
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit;
}

// Helper function to sanitize input
function sanitizeInput($input)
{
    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
}

// Helper function to convert language code to language name
function getLanguageName($languageCode)
{
    $languageMap = [
        'af' => 'Afrikaans',
        'ar' => 'Arabic',
        'bg' => 'Bulgarian',
        'bn' => 'Bengali',
        'ca' => 'Catalan',
        'cs' => 'Czech',
        'da' => 'Danish',
        'de' => 'German',
        'el' => 'Greek',
        'en' => 'English',
        'es' => 'Spanish',
        'et' => 'Estonian',
        'fa' => 'Persian',
        'fi' => 'Finnish',
        'fil' => 'Filipino',
        'fr' => 'French',
        'gu' => 'Gujarati',
        'he' => 'Hebrew',
        'hi' => 'Hindi',
        'hr' => 'Croatian',
        'hu' => 'Hungarian',
        'id' => 'Indonesian',
        'it' => 'Italian',
        'ja' => 'Japanese',
        'kn' => 'Kannada',
        'ko' => 'Korean',
        'lt' => 'Lithuanian',
        'lv' => 'Latvian',
        'ml' => 'Malayalam',
        'mr' => 'Marathi',
        'ms' => 'Malay',
        'nl' => 'Dutch',
        'no' => 'Norwegian',
        'pl' => 'Polish',
        'pt' => 'Portuguese',
        'ro' => 'Romanian',
        'ru' => 'Russian',
        'sk' => 'Slovak',
        'sl' => 'Slovenian',
        'sr' => 'Serbian',
        'sv' => 'Swedish',
        'sw' => 'Swahili',
        'ta' => 'Tamil',
        'te' => 'Telugu',
        'th' => 'Thai',
        'tr' => 'Turkish',
        'uk' => 'Ukrainian',
        'ur' => 'Urdu',
        'vi' => 'Vietnamese',
        'zh' => 'Chinese'
    ];

    return $languageMap[$languageCode] ?? $languageCode;
}

// Function to search for AI-recommended doctors based on symptoms
function getAIRecommendedDoctors($symptom, $conn)
{
    // Define the API key - we'll use the same key from health_tips.php
    $GEMINI_API_KEY = 'AIzaSyA-SczyTDGunUSkDCQL_6kDsSGV1JNvWrY';

    // Log the start of the search process
    error_log("AI Doctor Search started for symptom: $symptom");

    // Detect language and translate if not in English
    $originalSymptom = $symptom;
    $detectedLanguage = null;
    $translatedSymptom = null;

    // Check if symptom might not be in English
    if (!preg_match('/^[a-zA-Z0-9\s\.,\-\(\)]+$/', $symptom)) {
        error_log("Detected potentially non-English symptom: $symptom");

        try {
            // Call Google Translate API to detect language and translate to English
            $ch = curl_init();
            curl_setopt_array($ch, [
                CURLOPT_URL => 'https://translation.googleapis.com/language/translate/v2/detect?key=' . $GEMINI_API_KEY,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => json_encode([
                    'q' => $symptom
                ]),
                CURLOPT_HTTPHEADER => [
                    'Content-Type: application/json'
                ],
                CURLOPT_TIMEOUT => 15 // Increased timeout for more reliable results
            ]);

            $detectResponse = curl_exec($ch);
            $httpStatus = curl_getinfo($ch, CURLINFO_HTTP_CODE);

            if (curl_errno($ch)) {
                throw new Exception('Language detection failed: ' . curl_error($ch));
            }

            if ($httpStatus != 200) {
                throw new Exception("Language detection API returned status code: $httpStatus");
            }

            curl_close($ch);

            $detectData = json_decode($detectResponse, true);
            if (isset($detectData['data']['detections'][0][0]['language'])) {
                $detectedLanguage = $detectData['data']['detections'][0][0]['language'];
                $detectionConfidence = $detectData['data']['detections'][0][0]['confidence'] ?? 0;
                error_log("Detected language: $detectedLanguage with confidence: $detectionConfidence");

                // Only translate if not English and confidence is reasonable
                if ($detectedLanguage != 'en' && $detectionConfidence > 0.5) {
                    // Translate to English
                    $ch = curl_init();
                    curl_setopt_array($ch, [
                        CURLOPT_URL => 'https://translation.googleapis.com/language/translate/v2?key=' . $GEMINI_API_KEY,
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_POST => true,
                        CURLOPT_POSTFIELDS => json_encode([
                            'q' => $symptom,
                            'source' => $detectedLanguage,
                            'target' => 'en',
                            'format' => 'text'
                        ]),
                        CURLOPT_HTTPHEADER => [
                            'Content-Type: application/json'
                        ],
                        CURLOPT_TIMEOUT => 15
                    ]);

                    $translateResponse = curl_exec($ch);
                    $httpStatus = curl_getinfo($ch, CURLINFO_HTTP_CODE);

                    if (curl_errno($ch)) {
                        throw new Exception('Translation failed: ' . curl_error($ch));
                    }

                    if ($httpStatus != 200) {
                        throw new Exception("Translation API returned status code: $httpStatus");
                    }

                    curl_close($ch);

                    $translateData = json_decode($translateResponse, true);
                    if (isset($translateData['data']['translations'][0]['translatedText'])) {
                        $translatedSymptom = $translateData['data']['translations'][0]['translatedText'];
                        $symptom = $translatedSymptom;
                        error_log("Translated symptom: $symptom");
                    }
                }
            }
        } catch (Exception $e) {
            error_log("Translation error: " . $e->getMessage());
            // Continue with original symptom if translation fails
        }
    }

    // Build prompt that will help the AI suggest doctor specialties based on symptoms
    $prompt = "As a medical AI assistant, analyze the following symptom or health concern: \"$symptom\". 
    
    First, identify the most appropriate medical specialist type(s) for this symptom.
    Then, provide your response in this exact JSON format:
    {
      \"specialties\": [\"Primary Specialty\", \"Secondary Specialty\", \"Tertiary Specialty\"],
      \"urgency\": \"routine|urgent|emergency\",
      \"body_system\": \"cardiovascular|respiratory|neurological|digestive|musculoskeletal|dermatological|endocrine|urological|reproductive|psychological\"
    }
    
    For specialties, use standard medical specialty names that would be found in healthcare databases.
    For urgency, use:
    - emergency: for life-threatening conditions requiring immediate care
    - urgent: for serious conditions requiring prompt attention within 24 hours
    - routine: for non-urgent conditions
    
    Return ONLY the JSON, with no explanations before or after.";

    // Direct mapping for emergency symptoms (bypass AI for critical conditions)
    $directMapping = false;
    $emergencyKeywords = [
        'chest pain',
        'difficulty breathing',
        'shortness of breath',
        'severe bleeding',
        'unconscious',
        'unresponsive',
        'stroke',
        'heart attack',
        'seizure',
        'overdose',
        'poisoning',
        'anaphylaxis',
        'allergic reaction',
        'suicide',
        'paro cardíaco',
        'ataque cardíaco',
        'dificultad para respirar',
        'inconsciente',
        'convulsiones'
    ];

    foreach ($emergencyKeywords as $keyword) {
        if (
            stripos($symptom, $keyword) !== false ||
            ($translatedSymptom && stripos($translatedSymptom, $keyword) !== false)
        ) {
            $specialties = "Emergency Medicine, Cardiologist, Critical Care";
            $directMapping = true;
            $urgency = "emergency";
            $bodySystem = "cardiovascular";
            error_log("EMERGENCY DETECTED: Direct mapping for keyword '$keyword' to: $specialties");
            break;
        }
    }

    try {
        $specialtyInfo = [];

        // Call Gemini API to get suggested specialties if we don't have a direct mapping
        if (!$directMapping) {
            $ch = curl_init();
            curl_setopt_array($ch, [
                CURLOPT_URL => 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => json_encode([
                    'contents' => [['parts' => [['text' => $prompt]]]],
                    'generationConfig' => [
                        'temperature' => 0.2,
                        'topP' => 0.8,
                        'topK' => 40
                    ]
                ]),
                CURLOPT_HTTPHEADER => [
                    'Content-Type: application/json',
                    'x-goog-api-key: ' . $GEMINI_API_KEY
                ],
                CURLOPT_TIMEOUT => 20
            ]);

            $response = curl_exec($ch);
            $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

            if (curl_errno($ch)) {
                throw new Exception('API request failed: ' . curl_error($ch));
            }

            if ($http_code !== 200) {
                throw new Exception("API returned error code: $http_code");
            }

            curl_close($ch);

            // Parse the API response
            $data = json_decode($response, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception('Failed to parse API response: ' . json_last_error_msg());
            }

            $responseText = $data['candidates'][0]['content']['parts'][0]['text'] ?? '';
            error_log("Raw AI response: " . $responseText);

            // Try to parse JSON from the response
            try {
                // Clean the response text to ensure it contains only the JSON part
                $jsonText = trim($responseText);

                // Remove any markdown code block markers
                $jsonText = preg_replace('/```json|```/', '', $jsonText);

                // Attempt to parse the JSON
                $specialtyInfo = json_decode($jsonText, true);

                if (json_last_error() !== JSON_ERROR_NONE || !is_array($specialtyInfo)) {
                    throw new Exception('Invalid JSON format in AI response: ' . json_last_error_msg());
                }

                error_log("Successfully parsed specialty info: " . json_encode($specialtyInfo));
            } catch (Exception $e) {
                error_log("Failed to parse JSON from AI response: " . $e->getMessage());

                // Fallback: Try to extract specialties with regex
                preg_match_all('/"([^"]+)"/', $responseText, $matches);
                if (!empty($matches[1])) {
                    $specialtyInfo = [
                        'specialties' => array_slice($matches[1], 0, 3),
                        'urgency' => 'routine',
                        'body_system' => 'unknown'
                    ];
                    error_log("Used regex fallback to extract specialties: " . json_encode($specialtyInfo['specialties']));
                } else {
                    // If all else fails, use default specialties
                    $specialtyInfo = [
                        'specialties' => ['General Practitioner', 'Family Medicine'],
                        'urgency' => 'routine',
                        'body_system' => 'unknown'
                    ];
                    error_log("Used default specialties due to parsing failure");
                }
            }

            // Final validation of specialty info structure
            if (!isset($specialtyInfo['specialties']) || !is_array($specialtyInfo['specialties'])) {
                $specialtyInfo['specialties'] = ['General Practitioner'];
            }
            if (!isset($specialtyInfo['urgency'])) {
                $specialtyInfo['urgency'] = 'routine';
            }
            if (!isset($specialtyInfo['body_system'])) {
                $specialtyInfo['body_system'] = 'unknown';
            }
        } else {
            // Use the direct mapping for emergency cases
            $specialtyInfo = [
                'specialties' => explode(', ', $specialties),
                'urgency' => $urgency,
                'body_system' => $bodySystem
            ];
        }

        // Store the array of specialties for display purposes
        $displaySpecialties = $specialtyInfo['specialties'];
        $urgencyLevel = $specialtyInfo['urgency'];
        $bodySystem = $specialtyInfo['body_system'];

        // Prepare array to store doctors
        $doctors = [];

        // Create a query to find doctors with these specialties
        if (!empty($displaySpecialties)) {
            // Map common specialty variations to standard terms
            $specialtyMap = [
                // Cardiovascular
                'cardiologist' => ['cardiology', 'heart specialist', 'heart doctor', 'cardiac'],
                // Respiratory
                'pulmonologist' => ['pulmonology', 'lung specialist', 'respiratory'],
                // Neurology
                'neurologist' => ['neurology', 'nerve specialist', 'brain specialist'],
                // Gastroenterology
                'gastroenterologist' => ['gastroenterology', 'digestive specialist', 'stomach doctor'],
                // Orthopedics
                'orthopedist' => ['orthopedics', 'orthopaedic', 'bone specialist', 'joint specialist'],
                // Dermatology
                'dermatologist' => ['dermatology', 'skin specialist', 'skin doctor'],
                // Psychology/Psychiatry
                'psychiatrist' => ['psychiatry', 'mental health specialist'],
                'psychologist' => ['psychology', 'counselor', 'therapist'],
                // General
                'general practitioner' => ['gp', 'family doctor', 'primary care'],
                'family medicine' => ['family practice', 'family physician', 'primary care'],
                // Emergency
                'emergency medicine' => ['emergency physician', 'emergency doctor', 'er doctor'],
                // OB/GYN
                'obstetrician' => ['obstetrics', 'pregnancy doctor', 'ob/gyn'],
                'gynecologist' => ['gynecology', 'women\'s health specialist', 'ob/gyn']
            ];

            // Expand specialties with their variations
            $expandedSpecialties = [];
            foreach ($displaySpecialties as $specialty) {
                $specialty = trim(strtolower($specialty));
                $expandedSpecialties[] = $specialty;

                // Add variations from the map
                foreach ($specialtyMap as $mainTerm => $variations) {
                    if ($specialty == $mainTerm || in_array($specialty, $variations)) {
                        // Add the main term and all variations
                        $expandedSpecialties[] = $mainTerm;
                        $expandedSpecialties = array_merge($expandedSpecialties, $variations);
                    }
                }
            }

            // Remove duplicates and standardize
            $expandedSpecialties = array_unique(array_map('trim', $expandedSpecialties));

            // Log what we're searching for (debugging)
            error_log("Searching for expanded specialties: " . implode(", ", $expandedSpecialties));

            // Build the advanced query with prioritization
            $query = "SELECT u.*,
                    COALESCE((SELECT AVG(rating) FROM reviews WHERE doctor_id = u.id), 0) as avg_rating,
                    (SELECT COUNT(*) FROM reviews WHERE doctor_id = u.id) as review_count,
                    GROUP_CONCAT(DISTINCT d.degree_name SEPARATOR ', ') as degrees,
                    CASE 
                        WHEN u.specialty IS NOT NULL AND TRIM(u.specialty) != '' THEN 1
                        ELSE 0
                    END as has_specialty
                    FROM users u
                    LEFT JOIN degrees d ON u.id = d.doctor_id
                    WHERE u.role = 'doctor'";

            $searchTerms = [];
            $conditions = [];

            // First check for exact matches
            foreach ($expandedSpecialties as $specialty) {
                $conditions[] = "LOWER(u.specialty) = LOWER(?)";
                $searchTerms[] = $specialty;
            }

            // Then check for LIKE matches
            foreach ($expandedSpecialties as $specialty) {
                // Use word boundary for more precise matching
                $conditions[] = "LOWER(u.specialty) LIKE ?";
                $searchTerms[] = "%" . strtolower($specialty) . "%";
            }

            // Add specialized LIKE patterns for better matching
            foreach ($expandedSpecialties as $specialty) {
                // Match at beginning of specialty field
                $conditions[] = "LOWER(u.specialty) LIKE ?";
                $searchTerms[] = strtolower($specialty) . "%";

                // Match as a whole word
                $conditions[] = "LOWER(u.specialty) LIKE ?";
                $searchTerms[] = "% " . strtolower($specialty) . " %";
            }

            // Combine all conditions with OR
            if (!empty($conditions)) {
                $query .= " AND (" . implode(" OR ", $conditions) . ")";
            }

            $query .= " GROUP BY u.id";

            // Add ordering logic based on match quality and ratings
            $query .= " ORDER BY 
                    CASE 
                         WHEN LOWER(u.specialty) = LOWER(?) THEN 10 
                         WHEN LOWER(u.specialty) LIKE ? THEN 8
                         WHEN LOWER(u.specialty) LIKE ? THEN 6
                         WHEN LOWER(u.specialty) LIKE ? THEN 4
                         ELSE 1 
                     END DESC,
                     has_specialty DESC,
                     avg_rating DESC, 
                     review_count DESC, 
                     u.years_of_experience DESC 
                     LIMIT 15";

            // Add the primary specialty for ordering parameters
            $primarySpecialty = strtolower(trim($displaySpecialties[0]));
            $searchTerms[] = $primarySpecialty; // Exact match
            $searchTerms[] = "%" . $primarySpecialty . "%"; // Contains
            $searchTerms[] = $primarySpecialty . "%"; // Starts with
            $searchTerms[] = "% " . $primarySpecialty . " %"; // Whole word

            // Set types string to match parameter count
            $types = str_repeat('s', count($searchTerms));

            // Log the query parameters for debugging
            error_log("SQL Query: " . $query);
            error_log("Search terms count: " . count($searchTerms));
            error_log("Search terms: " . implode(", ", array_slice($searchTerms, 0, min(10, count($searchTerms)))));

            // Execute the query
            $stmt = $conn->prepare($query);
            if (!$stmt) {
                error_log("Query preparation failed: " . $conn->error);
                throw new Exception("Query preparation failed: " . $conn->error);
            }

            try {
                // Ensure the types string matches the number of parameters
                if (strlen($types) !== count($searchTerms)) {
                    $types = str_repeat('s', count($searchTerms));
                }

                $stmt->bind_param($types, ...$searchTerms);
                $stmt->execute();
                $result = $stmt->get_result();
                $doctors = $result->fetch_all(MYSQLI_ASSOC);

                // Log the results (debugging)
                error_log("Found " . count($doctors) . " doctors for the query");
            } catch (Exception $e) {
                error_log("Error executing specialty query: " . $e->getMessage());
                // We'll continue to the fallback mechanisms
            }

            // If no doctors found or too few, try a more focused approach with body system
            if (count($doctors) < 3 && !empty($bodySystem) && $bodySystem != 'unknown') {
                error_log("Trying body system fallback with system: $bodySystem");

                $bodySystemKeywords = [
                    'cardiovascular' => ['heart', 'cardio', 'cardiac', 'vascular', 'circulation'],
                    'respiratory' => ['lung', 'pulmonary', 'respiratory', 'breathing', 'pulmonologist'],
                    'neurological' => ['brain', 'neuro', 'nerve', 'neurologist', 'nervous system'],
                    'digestive' => ['gastro', 'digestive', 'stomach', 'intestine', 'gi', 'liver'],
                    'musculoskeletal' => ['muscle', 'bone', 'joint', 'orthopedic', 'skeletal', 'spine'],
                    'dermatological' => ['skin', 'derma', 'rash', 'dermatology'],
                    'endocrine' => ['hormone', 'thyroid', 'diabetes', 'endocrine', 'metabolism'],
                    'urological' => ['kidney', 'bladder', 'urinary', 'urology'],
                    'reproductive' => ['reproductive', 'fertility', 'gynecology', 'obstetrics', 'ob/gyn', 'urology'],
                    'psychological' => ['mental', 'psych', 'psychiatry', 'psychology', 'behavior']
                ];

                if (isset($bodySystemKeywords[$bodySystem])) {
                    $systemTerms = $bodySystemKeywords[$bodySystem];

                    $systemQuery = "SELECT u.*,
                            COALESCE((SELECT AVG(rating) FROM reviews WHERE doctor_id = u.id), 0) as avg_rating,
                            (SELECT COUNT(*) FROM reviews WHERE doctor_id = u.id) as review_count,
                            GROUP_CONCAT(DISTINCT d.degree_name SEPARATOR ', ') as degrees
                            FROM users u
                            LEFT JOIN degrees d ON u.id = d.doctor_id
                        WHERE u.role = 'doctor' AND (";

                    $systemConditions = [];
                    $systemParams = [];
                    $systemTypes = '';

                    foreach ($systemTerms as $term) {
                        $systemConditions[] = "LOWER(u.specialty) LIKE ?";
                        $systemParams[] = "%" . strtolower($term) . "%";
                        $systemTypes .= 's';
                    }

                    $systemQuery .= implode(' OR ', $systemConditions) . ")
                            GROUP BY u.id
                            ORDER BY avg_rating DESC, review_count DESC
                            LIMIT 10";

                    try {
                        $systemStmt = $conn->prepare($systemQuery);
                        $systemStmt->bind_param($systemTypes, ...$systemParams);
                        $systemStmt->execute();
                        $systemResult = $systemStmt->get_result();
                        $systemDoctors = $systemResult->fetch_all(MYSQLI_ASSOC);

                        error_log("Found " . count($systemDoctors) . " doctors with body system approach");

                        // Combine results, ensuring no duplicates
                        $existingIds = array_column($doctors, 'id');
                        foreach ($systemDoctors as $doctor) {
                            if (!in_array($doctor['id'], $existingIds)) {
                                $doctors[] = $doctor;
                                $existingIds[] = $doctor['id'];
                            }
                        }
                    } catch (Exception $e) {
                        error_log("Error in body system query: " . $e->getMessage());
                    }
                }
            }

            // If still no doctors or too few found, try a more basic approach
            if (count($doctors) < 5) {
                error_log("Trying with basic keyword approach");

                // Try a more basic approach with just the main keywords
                $query = "SELECT u.*,
                            COALESCE((SELECT AVG(rating) FROM reviews WHERE doctor_id = u.id), 0) as avg_rating,
                            (SELECT COUNT(*) FROM reviews WHERE doctor_id = u.id) as review_count,
                            GROUP_CONCAT(DISTINCT d.degree_name SEPARATOR ', ') as degrees
                            FROM users u
                            LEFT JOIN degrees d ON u.id = d.doctor_id
                            WHERE u.role = 'doctor'";

                // Just use the core words from each specialty
                $basicTerms = [];
                $basicTypes = '';

                foreach ($displaySpecialties as $specialty) {
                    // Get the base word (without -ist, -ician, etc.)
                    $baseWord = preg_replace('/(ologist|iatrist|ician|ist|ic|ics|y)$/i', '', strtolower(trim($specialty)));
                    if (strlen($baseWord) >= 3) {
                        $query .= " AND LOWER(u.specialty) LIKE ?";
                        $basicTerms[] = "%" . $baseWord . "%";
                        $basicTypes .= 's';
                        error_log("Trying base word: $baseWord from $specialty");
                    }
                }

                if (!empty($basicTerms)) {
                    $query .= " GROUP BY u.id ORDER BY avg_rating DESC, review_count DESC LIMIT 10";

                    try {
                        $stmt = $conn->prepare($query);
                        if ($stmt) {
                            // Ensure the types string matches the parameter count
                            if (strlen($basicTypes) !== count($basicTerms)) {
                                $basicTypes = str_repeat('s', count($basicTerms));
                            }

                            $stmt->bind_param($basicTypes, ...$basicTerms);
                            $stmt->execute();
                            $result = $stmt->get_result();
                            $basicDoctors = $result->fetch_all(MYSQLI_ASSOC);
                            error_log("Found " . count($basicDoctors) . " doctors with basic approach");

                            // Merge with existing doctors without duplicates
                            $existingIds = array_column($doctors, 'id');
                            foreach ($basicDoctors as $doctor) {
                                if (!in_array($doctor['id'], $existingIds)) {
                                    $doctors[] = $doctor;
                                    $existingIds[] = $doctor['id'];
                                }
                            }
                        }
                    } catch (Exception $e) {
                        error_log("Error in basic query: " . $e->getMessage());
                    }
                }
            }

            // If still no doctors found, provide fallback with highest rated doctors
            if (empty($doctors)) {
                error_log("No doctors found, showing fallback results");
                $fallbackQuery = "SELECT u.*,
                        COALESCE((SELECT AVG(rating) FROM reviews WHERE doctor_id = u.id), 0) as avg_rating,
                        (SELECT COUNT(*) FROM reviews WHERE doctor_id = u.id) as review_count,
                        GROUP_CONCAT(DISTINCT d.degree_name SEPARATOR ', ') as degrees
                        FROM users u
                        LEFT JOIN degrees d ON u.id = d.doctor_id
                        WHERE u.role = 'doctor'
                        GROUP BY u.id
                        ORDER BY avg_rating DESC, review_count DESC
                    LIMIT 8";

                $fallbackStmt = $conn->prepare($fallbackQuery);
                $fallbackStmt->execute();
                $fallbackResult = $fallbackStmt->get_result();
                $doctors = $fallbackResult->fetch_all(MYSQLI_ASSOC);

                // Flag to indicate we're showing fallback results
                $using_fallback = true;
            } else {
                $using_fallback = false;
            }
        }

        return [
            'specialties' => $displaySpecialties,
            'doctors' => $doctors,
            'using_fallback' => $using_fallback ?? false,
            'original_symptom' => $originalSymptom,
            'translated_symptom' => $translatedSymptom,
            'detected_language' => $detectedLanguage,
            'urgency' => $urgencyLevel ?? 'routine',
            'body_system' => $bodySystem ?? 'unknown'
        ];
    } catch (Exception $e) {
        error_log('AI Doctor Search Error: ' . $e->getMessage());
        return [
            'specialties' => [],
            'doctors' => [],
            'error' => $e->getMessage(),
            'original_symptom' => $originalSymptom,
            'translated_symptom' => $translatedSymptom,
            'detected_language' => $detectedLanguage,
            'urgency' => 'unknown',
            'body_system' => 'unknown'
        ];
    }
}

$conn = connectDB();
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

$user_id = (int)$_SESSION['user_id'];

// Get current user info
$user_stmt = $conn->prepare("SELECT role, username, profile_image FROM users WHERE id = ?");
if (!$user_stmt) {
    die("Preparation failed: " . $conn->error);
}
$user_stmt->bind_param("i", $user_id);
$user_stmt->execute();
$user_result = $user_stmt->get_result();
$user = $user_result->fetch_assoc();

// Process AI doctor search if submitted
$ai_search_results = null;
$symptom = '';
$specialty_debug_info = [];

if (isset($_GET['ai_symptom']) && !empty($_GET['ai_symptom'])) {
    $symptom = sanitizeInput($_GET['ai_symptom']);

    // Let's check the structure of the specialty field to better understand the data
    $specialty_query = "SELECT DISTINCT specialty FROM users WHERE role = 'doctor' AND specialty IS NOT NULL AND specialty != '' ORDER BY specialty LIMIT 20";
    $specialty_debug = $conn->query($specialty_query);
    if ($specialty_debug) {
        while ($row = $specialty_debug->fetch_assoc()) {
            $specialty_debug_info[] = $row['specialty'];
        }
        // Log the specialties for debugging
        error_log("Available specialties in database: " . implode(", ", $specialty_debug_info));
    }

    // Check specifically for cardiology-related entries
    $cardio_query = "SELECT id, username, specialty FROM users WHERE role = 'doctor' AND (
        specialty LIKE '%cardio%' OR 
        specialty LIKE '%heart%' OR 
        specialty LIKE '%cardiac%'
    ) LIMIT 10";
    $cardio_debug = $conn->query($cardio_query);
    if ($cardio_debug) {
        $cardio_doctors = [];
        while ($row = $cardio_debug->fetch_assoc()) {
            $cardio_doctors[] = $row['username'] . " (" . $row['specialty'] . ")";
        }
        if (!empty($cardio_doctors)) {
            error_log("Found cardiology doctors: " . implode(", ", $cardio_doctors));
        } else {
            error_log("No cardiology doctors found in database");
        }
    }

    $ai_search_results = getAIRecommendedDoctors($symptom, $conn);
}

// Sanitize and validate filter parameters
$specialty = isset($_GET['specialty']) ? sanitizeInput($_GET['specialty']) : '';
$location = isset($_GET['location']) ? sanitizeInput($_GET['location']) : '';
$experience = isset($_GET['experience']) ? (int)$_GET['experience'] : '';
$rating = isset($_GET['rating']) ? (float)$_GET['rating'] : '';

// Get available specialties
$specialties_query = "SELECT DISTINCT specialty FROM users WHERE specialty IS NOT NULL AND specialty != '' ORDER BY specialty";
$specialties_result = $conn->query($specialties_query);
$specialties = [];
while ($row = $specialties_result->fetch_assoc()) {
    $specialties[] = $row['specialty'];
}

// Build doctor query
$query = "SELECT u.*,
COALESCE((SELECT AVG(rating) FROM reviews WHERE doctor_id = u.id), 0) as avg_rating,
(SELECT COUNT(*) FROM reviews WHERE doctor_id = u.id) as review_count,
GROUP_CONCAT(DISTINCT d.degree_name SEPARATOR ', ') as degrees
FROM users u
LEFT JOIN degrees d ON u.id = d.doctor_id
WHERE u.role = 'doctor'";

$params = [];
$types = '';

if (!empty($specialty)) {
    $query .= " AND u.specialty LIKE ?";
    $params[] = "%$specialty%";
    $types .= 's';
}

if (!empty($location)) {
    $query .= " AND u.work_address LIKE ?";
    $params[] = "%$location%";
    $types .= 's';
}

if (!empty($experience)) {
    $query .= " AND u.years_of_experience >= ?";
    $params[] = $experience;
    $types .= 'i';
}

$query .= " GROUP BY u.id";

if (!empty($rating)) {
    $query .= " HAVING avg_rating >= ?";
    $params[] = $rating;
    $types .= 'd';
}

$query .= " ORDER BY avg_rating DESC, review_count DESC";

// Execute doctor query
$stmt = $conn->prepare($query);
if (!empty($params)) {
    $stmt->bind_param($types, ...$params);
}
$stmt->execute();
$result = $stmt->get_result();
$doctors = $result->fetch_all(MYSQLI_ASSOC);

$conn->close();
?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Doctors - MediLinx</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        :root {
            --primary: #1D7A8C;
            --primary-light: #23949C;
            --primary-dark: #156573;
            --primary-gradient: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            --secondary: #144E5A;
            --secondary-light: #1D7A8C;
            --accent: #E94F37;
            --accent-light: #FF6F59;
            --success: #27AE60;
            --light-bg: #F5F9FB;
            --card-bg: #FFFFFF;
            --text: #2D3B45;
            --text-light: #546E7A;
            --text-lighter: #90A4AE;
            --border: #E1EDF2;
            --shadow-sm: 0 2px 10px rgba(29, 122, 140, 0.05);
            --shadow-md: 0 4px 20px rgba(29, 122, 140, 0.1);
            --shadow-lg: 0 10px 30px rgba(29, 122, 140, 0.15);
            --shadow-xl: 0 15px 40px rgba(29, 122, 140, 0.2);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --radius-sm: 0.5rem;
            --radius-md: 1rem;
            --radius-lg: 1.5rem;
            --transition-bounce: cubic-bezier(0.34, 1.56, 0.64, 1);

            /* NEW AI THEME COLORS */
            --ai-primary: #6a3093;
            --ai-secondary: #a044ff;
            --ai-gradient: linear-gradient(135deg, var(--ai-primary) 0%, var(--ai-secondary) 100%);
            --ai-light: rgba(106, 48, 147, 0.1);
            --emergency: #e53935;
            --emergency-light: #ff5252;
            --urgent: #ff9800;
            --urgent-light: #ffb74d;
        }

        body {
            background-color: var(--light-bg);
            background-image:
                radial-gradient(at 80% 0%, hsla(189, 65%, 90%, 0.3) 0px, transparent 50%),
                radial-gradient(at 0% 50%, hsla(355, 65%, 90%, 0.2) 0px, transparent 50%),
                radial-gradient(at 80% 100%, hsla(176, 65%, 90%, 0.3) 0px, transparent 50%);
            background-attachment: fixed;
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            color: var(--text);
            line-height: 1.6;
            overflow-x: hidden;
        }

        * {
            box-sizing: border-box;
        }

        /* Translation info styles */
        .translation-info {
            display: block;
            margin-top: 0.5rem;
            padding: 0.5rem 1rem;
            background-color: rgba(235, 245, 250, 0.7);
            border-left: 3px solid var(--primary);
            border-radius: 0.25rem;
            font-size: 0.9rem;
            color: var(--text-light);
            transition: all 0.3s ease;
        }

        .translation-info i {
            color: var(--primary);
            margin-right: 0.5rem;
        }

        .translation-info em {
            font-weight: 500;
            color: var(--primary-dark);
        }

        /* Add animated pulse highlight for translated text */
        @keyframes pulse-highlight {

            0%,
            100% {
                background-color: rgba(235, 245, 250, 0.7);
            }

            50% {
                background-color: rgba(29, 122, 140, 0.1);
            }
        }

        .translation-info {
            animation: pulse-highlight 3s ease-in-out 1;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            animation: fadeIn 0.8s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(15px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .page-title {
            font-size: 2rem;
            color: var(--secondary);
            margin-bottom: 2rem;
            position: relative;
            display: inline-block;
            font-weight: 700;
            letter-spacing: -0.02em;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .page-title:after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 60%;
            height: 4px;
            background: var(--primary-gradient);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(29, 122, 140, 0.3);
        }

        .search-section {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            padding: 3rem;
            border-radius: var(--radius-lg);
            box-shadow:
                0 10px 30px rgba(29, 122, 140, 0.1),
                0 1px 1px rgba(255, 255, 255, 0.5) inset,
                0 -1px 1px rgba(255, 255, 255, 0.3) inset;
            margin-bottom: 3rem;
            position: relative;
            overflow: hidden;
            transform: translateZ(0);
            transition: var(--transition);
            border: 1px solid rgba(255, 255, 255, 0.5);
        }

        .search-section:hover {
            box-shadow:
                0 15px 40px rgba(29, 122, 140, 0.15),
                0 1px 1px rgba(255, 255, 255, 0.5) inset,
                0 -1px 1px rgba(255, 255, 255, 0.3) inset;
            transform: translateY(-5px);
        }

        .search-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: var(--primary-gradient);
            z-index: 1;
        }

        .search-section::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0) 70%);
            opacity: 0;
            transform: translate(-30%, -30%);
            transition: opacity 0.8s ease;
            pointer-events: none;
            z-index: 0;
        }

        .search-section:hover::after {
            opacity: 0.4;
        }

        .search-header {
            text-align: center;
            margin-bottom: 1.75rem;
            position: relative;
            z-index: 1;
        }

        .search-header h1 {
            font-family: 'Montserrat', sans-serif;
            font-size: 2.2rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin-bottom: 0.25rem;
            font-weight: 700;
            letter-spacing: -0.03em;
            text-shadow: 0 2px 5px rgba(29, 122, 140, 0.1);
            position: relative;
            display: inline-block;
        }

        .search-header h1::after {
            content: '';
            position: absolute;
            left: 50%;
            bottom: -5px;
            width: 35px;
            height: 3px;
            background: var(--primary-gradient);
            transform: translateX(-50%);
            border-radius: 3px;
        }

        .search-header p {
            color: var(--text-light);
            font-size: 1.05rem;
            max-width: 600px;
            margin: 1rem auto 0;
            line-height: 1.5;
        }

        .search-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            position: relative;
            z-index: 1;
            margin-top: 1.5rem;
        }

        .search-group {
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 1.25rem 1.5rem;
            border: 2px solid var(--border);
            border-radius: var(--radius-md);
            font-size: 1rem;
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s var(--transition-bounce);
            background: rgba(255, 255, 255, 0.8);
            color: var(--text);
            box-shadow: var(--shadow-sm), 0 1px 2px rgba(255, 255, 255, 0.5) inset;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }

        .search-input:focus {
            border-color: var(--primary-light);
            box-shadow: 0 0 0 4px rgba(29, 122, 140, 0.2), 0 1px 2px rgba(255, 255, 255, 0.5) inset;
            outline: none;
            transform: translateY(-2px);
        }

        .search-input::placeholder {
            color: var(--text-lighter);
            font-size: 0.95rem;
            opacity: 0.8;
        }

        .search-button {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 1.15rem 2rem;
            border-radius: var(--radius-md);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
            box-shadow: 0 4px 15px rgba(29, 122, 140, 0.25), 0 1px 2px rgba(255, 255, 255, 0.3) inset;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            font-size: 1.05rem;
            letter-spacing: 0.3px;
            position: relative;
            overflow: hidden;
            z-index: 1;
            text-transform: uppercase;
        }

        .search-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.2) 0%, transparent 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: -1;
        }

        .search-button::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 3px;
            background: rgba(255, 255, 255, 0.6);
            transform: scaleX(0);
            transform-origin: right;
            transition: transform 0.4s var(--transition-bounce);
            z-index: -1;
        }

        .search-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(29, 122, 140, 0.4), 0 1px 2px rgba(255, 255, 255, 0.3) inset;
            background-image: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
        }

        .search-button:hover::before {
            opacity: 1;
        }

        .search-button:hover::after {
            transform: scaleX(1);
            transform-origin: left;
        }

        .search-button:active {
            transform: translateY(-1px) scale(0.98);
            box-shadow: 0 5px 15px rgba(29, 122, 140, 0.3);
        }

        .search-button i {
            font-size: 1.1rem;
            transition: all 0.4s var(--transition-bounce);
        }

        .search-button:hover i {
            transform: translateX(3px) scale(1.1) rotate(10deg);
            color: rgba(255, 255, 255, 0.95);
        }

        .results-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            font-weight: 500;
        }

        .results-count {
            color: var(--text);
            font-size: 1.1rem;
        }

        .results-count span {
            color: var(--primary);
            font-weight: 600;
        }

        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 2.5rem;
            padding: 0.5rem 0;
        }

        .doctor-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: var(--radius-lg);
            overflow: hidden;
            box-shadow:
                0 20px 30px rgba(0, 0, 0, 0.05),
                0 1px 1px rgba(255, 255, 255, 0.7) inset;
            transition: all 0.4s var(--transition-bounce);
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.7);
            height: 100%;
            transform-style: preserve-3d;
            perspective: 1000px;
        }

        .doctor-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow:
                0 30px 60px rgba(0, 0, 0, 0.1),
                0 1px 1px rgba(255, 255, 255, 0.7) inset;
            border: 1px solid rgba(255, 255, 255, 0.9);
        }

        .doctor-image-container {
            position: relative;
            width: 100%;
            height: 260px;
            overflow: hidden;
        }

        .doctor-image-container::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 60%;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.7) 0%, rgba(0, 0, 0, 0) 100%);
            z-index: 1;
            opacity: 0.8;
            transition: opacity 0.5s ease;
        }

        .doctor-card:hover .doctor-image-container::after {
            opacity: 1;
            height: 70%;
        }

        .doctor-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 1s ease;
            transform-origin: center;
        }

        .doctor-card:hover .doctor-image {
            transform: scale(1.1);
        }

        .doctor-content {
            padding: 2rem;
            display: flex;
            flex-direction: column;
            height: calc(100% - 260px);
            position: relative;
            z-index: 2;
        }

        .doctor-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 10%;
            width: 80%;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(29, 122, 140, 0.2), transparent);
        }

        .doctor-badge {
            position: absolute;
            top: 1.25rem;
            right: 1.25rem;
            background: linear-gradient(135deg, var(--accent) 0%, var(--accent-light) 100%);
            color: white;
            padding: 0.5rem 1.25rem;
            border-radius: 3rem;
            font-size: 0.85rem;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(233, 79, 55, 0.4);
            z-index: 2;
            animation: pulse 2s infinite;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(233, 79, 55, 0.7);
                transform: scale(0.95);
            }

            70% {
                box-shadow: 0 0 0 12px rgba(233, 79, 55, 0);
                transform: scale(1.05);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(233, 79, 55, 0);
                transform: scale(0.95);
            }
        }

        .doctor-specialty {
            color: var(--primary);
            font-weight: 700;
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
            position: relative;
            display: inline-block;
            padding-bottom: 6px;
        }

        .doctor-specialty::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 30px;
            height: 2px;
            background: var(--primary-gradient);
            border-radius: 3px;
        }

        .doctor-name {
            font-size: 1.5rem;
            font-weight: 700;
            margin: 0.5rem 0;
            color: var(--secondary);
            letter-spacing: -0.5px;
            transition: all 0.3s var(--transition-bounce);
        }

        .doctor-card:hover .doctor-name {
            color: var(--primary);
            transform: translateY(-2px);
        }

        .doctor-rating {
            display: flex;
            align-items: center;
            gap: 0.3rem;
            margin-bottom: 1.5rem;
        }

        .doctor-rating i {
            color: #FFB400;
            text-shadow: 0 1px 3px rgba(255, 180, 0, 0.3);
        }

        .doctor-rating span {
            color: var(--text-light);
            font-size: 0.95rem;
            margin-left: 0.35rem;
            font-weight: 500;
        }

        .doctor-review-count {
            color: var(--text-light);
            font-size: 0.85rem;
            margin-left: auto;
            opacity: 0.8;
            background: rgba(29, 122, 140, 0.08);
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            transition: all 0.3s ease;
        }

        .doctor-card:hover .doctor-review-count {
            background: rgba(29, 122, 140, 0.15);
        }

        .doctor-details {
            display: flex;
            flex-direction: column;
            gap: 1.25rem;
            margin-bottom: 2rem;
            flex-grow: 1;
            padding-top: 0.5rem;
        }

        .doctor-detail-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            color: var(--text-light);
            font-size: 0.95rem;
            transition: all 0.3s var(--transition-bounce);
            padding: 0.5rem 0;
            border-bottom: 1px dashed rgba(29, 122, 140, 0.1);
        }

        .doctor-detail-item:last-child {
            border-bottom: none;
        }

        .doctor-detail-item:hover {
            color: var(--text);
            transform: translateX(5px);
        }

        .doctor-detail-item i {
            color: var(--primary);
            font-size: 1.1rem;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            opacity: 0.9;
            transition: all 0.3s var(--transition-bounce);
            background: rgba(29, 122, 140, 0.1);
            border-radius: 50%;
            padding: 1rem;
        }

        .doctor-detail-item:hover i {
            opacity: 1;
            transform: scale(1.1) rotate(5deg);
            background: rgba(29, 122, 140, 0.2);
            box-shadow: 0 0 0 4px rgba(29, 122, 140, 0.05);
        }

        .view-profile-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            width: 100%;
            padding: 1.25rem;
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: var(--radius-md);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.4s var(--transition-bounce);
            text-decoration: none;
            position: relative;
            overflow: hidden;
            z-index: 1;
            font-size: 1rem;
            letter-spacing: 0.03em;
            text-transform: uppercase;
            box-shadow: 0 4px 15px rgba(29, 122, 140, 0.3);
        }

        .view-profile-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.7s ease;
            z-index: -1;
        }

        .view-profile-btn:hover::before {
            left: 100%;
        }

        .view-profile-btn:hover {
            background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(29, 122, 140, 0.4);
        }

        .view-profile-btn i {
            transition: transform 0.4s var(--transition-bounce);
            font-size: 1.1rem;
        }

        .view-profile-btn:hover i {
            transform: translateX(6px);
        }

        .doctor-languages {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: -0.5rem;
            margin-bottom: 1.25rem;
        }

        .language-tag {
            background: rgba(29, 122, 140, 0.08);
            color: var(--primary);
            font-size: 0.85rem;
            padding: 0.35rem 0.85rem;
            border-radius: 2rem;
            transition: all 0.3s var(--transition-bounce);
            border: 1px solid rgba(29, 122, 140, 0.1);
        }

        .language-tag:hover {
            background: rgba(29, 122, 140, 0.15);
            transform: translateY(-3px);
            box-shadow: 0 3px 8px rgba(29, 122, 140, 0.1);
            border-color: rgba(29, 122, 140, 0.2);
        }

        .no-results {
            text-align: center;
            padding: 5rem 2rem;
            grid-column: 1 / -1;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: var(--radius-lg);
            box-shadow:
                0 20px 30px rgba(0, 0, 0, 0.05),
                0 1px 1px rgba(255, 255, 255, 0.7) inset;
            animation: fadeIn 0.8s ease-out;
            border: 1px solid rgba(255, 255, 255, 0.7);
        }

        .no-results svg {
            width: 120px;
            height: 120px;
            color: var(--primary-light);
            margin-bottom: 2rem;
            opacity: 0.8;
            filter: drop-shadow(0 3px 6px rgba(29, 122, 140, 0.2));
            animation: floatAnimation 3s ease-in-out infinite;
        }

        @keyframes floatAnimation {
            0% {
                transform: translateY(0);
            }

            50% {
                transform: translateY(-10px);
            }

            100% {
                transform: translateY(0);
            }
        }

        .no-results h3 {
            color: var(--secondary);
            font-size: 2rem;
            margin-bottom: 1rem;
            font-weight: 700;
        }

        .no-results p {
            color: var(--text-light);
            max-width: 500px;
            margin: 0 auto 2rem;
            font-size: 1.2rem;
            line-height: 1.6;
        }

        .applied-filters {
            background: rgba(29, 122, 140, 0.05);
            padding: 1.5rem;
            border-radius: var(--radius-md);
            max-width: 500px;
            margin: 0 auto 2rem;
        }

        .applied-filters p {
            margin: 0 0 1rem;
            font-weight: 600;
            color: var(--secondary);
        }

        .applied-filters ul {
            margin: 0;
            padding: 0;
            list-style-type: none;
            text-align: left;
        }

        .applied-filters li {
            padding: 0.5rem 0;
            border-bottom: 1px dashed rgba(29, 122, 140, 0.1);
            color: var(--text-light);
        }

        .applied-filters li:last-child {
            border-bottom: none;
        }

        .reset-search-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: var(--radius-md);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.4s var(--transition-bounce);
            text-decoration: none;
            position: relative;
            overflow: hidden;
            z-index: 1;
            box-shadow: 0 8px 20px rgba(29, 122, 140, 0.3);
        }

        .reset-search-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.7s ease;
            z-index: -1;
        }

        .reset-search-btn:hover::before {
            left: 100%;
        }

        .reset-search-btn:hover {
            background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
            transform: translateY(-4px);
            box-shadow: 0 12px 25px rgba(29, 122, 140, 0.4);
        }

        .reset-search-btn i {
            transition: transform 0.4s var(--transition-bounce);
            font-size: 1.1rem;
        }

        .reset-search-btn:hover i {
            transform: rotate(360deg);
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            transition: all 0.5s ease;
        }

        .loading-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(255, 255, 255, 0.9);
            padding: 3rem;
            border-radius: var(--radius-lg);
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.6);
            animation: pulseScale 2s infinite;
            position: relative;
            overflow: hidden;
        }

        .loading-content::before {
            content: '';
            position: absolute;
            width: 150%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);
            transform: translateX(-100%) skewX(-20deg);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            100% {
                transform: translateX(100%) skewX(-20deg);
            }
        }

        @keyframes pulseScale {

            0%,
            100% {
                transform: scale(1);
                box-shadow: 0 15px 50px rgba(0, 0, 0, 0.1);
            }

            50% {
                transform: scale(1.03);
                box-shadow: 0 20px 60px rgba(29, 122, 140, 0.2);
            }
        }

        .loading-spinner {
            width: 70px;
            height: 70px;
            border: 4px solid rgba(29, 122, 140, 0.1);
            border-radius: 50%;
            position: relative;
            margin-bottom: 1.5rem;
        }

        .loading-spinner::before {
            content: '';
            position: absolute;
            top: -4px;
            left: -4px;
            right: -4px;
            bottom: -4px;
            border-radius: 50%;
            border: 4px solid transparent;
            border-top-color: var(--primary);
            border-bottom-color: var(--primary-light);
            animation: spin 1.5s linear infinite;
        }

        .loading-spinner::after {
            content: '';
            position: absolute;
            top: 4px;
            left: 4px;
            right: 4px;
            bottom: 4px;
            border-radius: 50%;
            border: 4px solid transparent;
            border-left-color: var(--accent);
            border-right-color: var(--accent-light);
            animation: spin 2s linear infinite reverse;
        }

        .loading-text {
            font-size: 1.25rem;
            color: var(--primary);
            font-weight: 600;
            position: relative;
            display: inline-block;
        }

        .loading-text::after {
            content: '...';
            position: absolute;
            right: -20px;
            animation: ellipsis 1.5s infinite;
        }

        @keyframes ellipsis {
            0% {
                content: '.';
            }

            33% {
                content: '..';
            }

            66% {
                content: '...';
            }

            100% {
                content: '.';
            }
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Suggestion Dropdown */
        .suggestions-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
            background: white;
            border-radius: 0 0 var(--radius-md) var(--radius-md);
            box-shadow: var(--shadow-md);
            z-index: 10;
            display: none;
        }

        .suggestion-item {
            padding: 0.75rem 1rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .suggestion-item:hover {
            background: rgba(29, 122, 140, 0.08);
        }

        /* Filter Pills */
        .active-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            margin: 1.5rem 0;
        }

        .filter-pill {
            background: rgba(29, 122, 140, 0.1);
            color: var(--primary);
            border-radius: 2rem;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: var(--transition);
        }

        .filter-pill:hover {
            background: rgba(29, 122, 140, 0.2);
        }

        .filter-pill i {
            cursor: pointer;
            transition: var(--transition);
        }

        .filter-pill i:hover {
            color: var(--accent);
            transform: scale(1.1);
        }

        /* Animation for doctor cards */
        .animate-card {
            animation: fadeInUp 0.6s ease-out forwards;
            opacity: 0;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Tooltip */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 160px;
            background-color: var(--secondary);
            color: white;
            text-align: center;
            border-radius: var(--radius-sm);
            padding: 0.5rem;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.85rem;
            box-shadow: var(--shadow-md);
        }

        .tooltip .tooltiptext::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: var(--secondary) transparent transparent transparent;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Back to top button */
        .back-to-top {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: var(--primary-gradient);
            color: white;
            width: 55px;
            height: 55px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            visibility: hidden;
            transition: all 0.4s var(--transition-bounce);
            box-shadow: 0 5px 15px rgba(29, 122, 140, 0.3);
            z-index: 99;
            border: 1px solid rgba(255, 255, 255, 0.3);
            transform: translateY(20px);
        }

        .back-to-top::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(rgba(255, 255, 255, 0.2), transparent);
            border-radius: 50%;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .back-to-top.visible {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .back-to-top:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(29, 122, 140, 0.4);
        }

        .back-to-top:hover::before {
            opacity: 1;
        }

        .back-to-top i {
            font-size: 1.25rem;
            transition: transform 0.3s var(--transition-bounce);
        }

        .back-to-top:hover i {
            transform: translateY(-3px);
        }

        @media (max-width: 1200px) {
            .doctors-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1.5rem 1rem;
            }

            .search-section {
                padding: 2rem 1.5rem;
            }

            .search-header h1 {
                font-size: 2rem;
            }

            .search-header p {
                font-size: 1rem;
            }

            .doctors-grid {
                grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
                gap: 1.5rem;
            }

            .doctor-image-container {
                height: 220px;
            }

            .doctor-content {
                padding: 1.5rem;
                height: calc(100% - 220px);
            }

            .doctor-name {
                font-size: 1.3rem;
            }
        }

        @media (max-width: 576px) {
            .search-form {
                grid-template-columns: 1fr;
            }

            .doctors-grid {
                grid-template-columns: 1fr;
                gap: 2rem;
            }

            .search-header h1 {
                font-size: 1.75rem;
            }

            .page-title {
                font-size: 1.6rem;
            }

            .doctor-card {
                max-width: 400px;
                margin: 0 auto;
            }

            .search-button {
                padding: 1rem 1.5rem;
            }

            .search-input {
                padding: 1rem 1.25rem;
            }

            .no-results {
                padding: 3rem 1.5rem;
            }

            .no-results svg {
                width: 80px;
                height: 80px;
            }

            .no-results h3 {
                font-size: 1.5rem;
            }

            .no-results p {
                font-size: 1rem;
            }
        }

        /* AI Doctor Search Styles - Modernized & Compact */
        .search-divider {
            position: relative;
            text-align: center;
            margin: 0.75rem 0;
            height: 12px;
        }

        .search-divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(29, 122, 140, 0.1);
            z-index: 1;
        }

        .search-divider span {
            position: relative;
            display: inline-block;
            padding: 0 1rem;
            background: white;
            color: var(--text-lighter);
            font-weight: 500;
            font-size: 0.8rem;
            z-index: 2;
            border-radius: 1rem;
            background: rgba(255, 255, 255, 0.9);
        }

        .ai-search-section {
            margin: 0.5rem 0;
            position: relative;
            animation: fadeIn 0.6s ease-out;
        }

        .ai-search-form {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            max-width: 100%;
            margin: 0;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 50px;
            padding: 0.35rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.04);
            border: 1px solid rgba(106, 48, 147, 0.08);
            transition: all 0.3s ease;
        }

        .ai-search-form:hover,
        .ai-search-form:focus-within {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
            border-color: rgba(106, 48, 147, 0.15);
        }

        .ai-search-input-container {
            flex: 1;
            position: relative;
            margin: 0;
        }

        .ai-search-input {
            font-size: 0.95rem;
            transition: all 0.3s ease;
            padding: 0.65rem 0.5rem 0.65rem 2.4rem;
            width: 100%;
            border: none !important;
            border-radius: 50px;
            background: transparent !important;
            box-shadow: none !important;
            color: var(--text);
        }

        .ai-search-input:focus {
            outline: none;
        }

        .ai-search-input::placeholder {
            color: var(--text-lighter);
            opacity: 0.7;
        }

        .ai-search-input-icon {
            position: absolute;
            left: 0.9rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--ai-primary);
            font-size: 0.9rem;
            opacity: 0.8;
            transition: all 0.3s ease;
        }

        .ai-search-input:focus+.ai-search-input-icon {
            color: var(--ai-secondary);
            opacity: 1;
            transform: translateY(-50%) scale(1.1);
        }

        .ai-search-button {
            background: var(--ai-gradient);
            color: white;
            padding: 0.65rem 1.2rem;
            border-radius: 50px;
            border: none;
            font-size: 0.9rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.4rem;
            transition: all 0.3s var(--transition-bounce);
            box-shadow: 0 4px 12px rgba(106, 48, 147, 0.2);
            margin: 0;
            white-space: nowrap;
        }

        .ai-search-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(106, 48, 147, 0.3);
            background: linear-gradient(135deg, #5d2884 0%, #8e3de0 100%);
        }

        .ai-search-button i {
            font-size: 0.85rem;
        }

        .ai-badge {
            position: absolute;
            left: 0.65rem;
            top: -10px;
            background: var(--ai-gradient);
            color: white;
            padding: 2px 8px;
            border-radius: 20px;
            font-size: 0.65rem;
            font-weight: 600;
            letter-spacing: 0.02em;
            z-index: 3;
            box-shadow: 0 3px 8px rgba(106, 48, 147, 0.2);
            display: flex;
            align-items: center;
            gap: 3px;
        }

        .ai-badge i {
            font-size: 0.65rem;
        }

        /* Enhanced AI Results Display */
        .ai-results-section {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            font-size: 0.8rem;
            padding: 5px 10px;
            border-radius: 4px;
            white-space: nowrap;
            animation: fadeIn 0.3s;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
        }

        /* Emergency attention highlight */
        @keyframes attention-highlight {

            0%,
            100% {
                box-shadow: 0 5px 15px rgba(229, 57, 53, 0.1);
            }

            50% {
                box-shadow: 0 5px 25px rgba(229, 57, 53, 0.5);
            }
        }

        .attention-highlight {
            animation: attention-highlight 1s ease 3;
        }

        /* Loading text animation */
        .loading-text::after {
            content: '';
            animation: ellipsis 1.5s infinite;
        }

        @keyframes ellipsis {
            0% {
                content: '.';
            }

            33% {
                content: '..';
            }

            66% {
                content: '...';
            }

            100% {
                content: '.';
            }
        }
    </style>
</head>

<body>
    <?php include 'navbar.php'; ?>

    <div class="dashboard-container">
        <h1 class="page-title">Find Doctors</h1>
        <p>Welcome to the MediLinx doctor search page. Use the filters below to find the right healthcare provider for your needs.</p>
    </div>

    <!-- Search Section -->
    <div class="search-section">
        <div class="search-header">
            <h1>Find the Right Healthcare Provider</h1>
            <p>Search for doctors who meet your specific needs using our intelligent search filters</p>
        </div>

        <!-- Regular Search Form -->
        <form action="dashboard.php" method="GET" id="doctorSearchForm" class="search-form">
            <div class="search-group">
                <select name="specialty" class="search-input">
                    <option value="">All Specialties</option>
                    <?php foreach ($specialties as $s): ?>
                        <option value="<?= htmlspecialchars($s) ?>" <?= ($specialty == $s) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($s) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="search-group">
                <input type="text" name="location" placeholder="Location" class="search-input" value="<?= htmlspecialchars($location) ?>">
            </div>

            <div class="search-group">
                <select name="experience" class="search-input">
                    <option value="">Any Experience</option>
                    <option value="1" <?= ($experience == 1) ? 'selected' : '' ?>>1+ Years</option>
                    <option value="3" <?= ($experience == 3) ? 'selected' : '' ?>>3+ Years</option>
                    <option value="5" <?= ($experience == 5) ? 'selected' : '' ?>>5+ Years</option>
                    <option value="10" <?= ($experience == 10) ? 'selected' : '' ?>>10+ Years</option>
                </select>
            </div>

            <div class="search-group">
                <select name="rating" class="search-input">
                    <option value="">Any Rating</option>
                    <option value="3" <?= ($rating == 3) ? 'selected' : '' ?>>3+ Stars</option>
                    <option value="4" <?= ($rating == 4) ? 'selected' : '' ?>>4+ Stars</option>
                    <option value="4.5" <?= ($rating == 4.5) ? 'selected' : '' ?>>4.5+ Stars</option>
                </select>
            </div>

            <button type="submit" class="search-button">
                <i class="fas fa-search"></i> Search
            </button>
        </form>

        <!-- AI Symptom Search -->
        <div class="search-divider">
            <span>OR</span>
        </div>

        <div class="ai-search-section">
            <form action="dashboard.php" method="GET" id="aiDoctorSearchForm">
                <div class="ai-badge">
                    <i class="fas fa-robot"></i> AI
                </div>
                <div class="ai-search-form">
                    <div class="ai-search-input-container">
                        <input type="text" name="ai_symptom" id="aiSymptomInput" class="ai-search-input" placeholder="Describe your symptoms or health concern..." value="<?= htmlspecialchars($symptom) ?>">
                        <i class="fas fa-heartbeat ai-search-input-icon"></i>
                    </div>
                    <button type="submit" class="ai-search-button">
                        <i class="fas fa-stethoscope"></i> Find Specialist
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- AI Search Results -->
    <?php if (isset($ai_search_results) && !empty($ai_search_results)): ?>
        <div class="search-section">
            <div class="search-header">
                <h1>
                    <?php if ($ai_search_results['urgency'] === 'emergency'): ?>
                        <span style="color: var(--emergency);">⚠️ Emergency Assessment</span>
                    <?php elseif ($ai_search_results['urgency'] === 'urgent'): ?>
                        <span style="color: var(--urgent);">⚠️ Urgent Assessment</span>
                    <?php else: ?>
                        AI Specialist Recommendations
                    <?php endif; ?>
                </h1>

                <?php if (!empty($ai_search_results['specialties'])): ?>
                    <p>Based on your symptoms, our AI recommends these medical specialties:
                        <strong><?= htmlspecialchars(implode(', ', $ai_search_results['specialties'])) ?></strong>
                    </p>
                <?php endif; ?>

                <?php if ($ai_search_results['translated_symptom']): ?>
                    <div class="translation-info">
                        <i class="fas fa-language"></i> Detected <em><?= htmlspecialchars(getLanguageName($ai_search_results['detected_language'])) ?></em>.
                        Translated: "<?= htmlspecialchars($ai_search_results['translated_symptom']) ?>"
                    </div>
                <?php endif; ?>
            </div>

            <!-- Doctors Grid for AI Results -->
            <div class="doctors-grid">
                <?php if (!empty($ai_search_results['doctors'])): ?>
                    <?php foreach ($ai_search_results['doctors'] as $index => $doctor): ?>
                        <div class="doctor-card animate-card" style="animation-delay: <?= ($index * 0.1) ?>s">
                            <?php if ($ai_search_results['urgency'] === 'emergency'): ?>
                                <div class="doctor-badge" style="background: var(--emergency-gradient);">EMERGENCY CARE</div>
                            <?php elseif ($ai_search_results['urgency'] === 'urgent'): ?>
                                <div class="doctor-badge" style="background: var(--urgent-gradient);">URGENT CARE</div>
                            <?php elseif ($index === 0): ?>
                                <div class="doctor-badge">BEST MATCH</div>
                            <?php endif; ?>

                            <div class="doctor-image-container">
                                <img class="doctor-image" src="<?= !empty($doctor['profile_image']) ? 'uploads/' . htmlspecialchars($doctor['profile_image']) : 'assets/img/default-avatar.png' ?>" alt="<?= htmlspecialchars($doctor['username']) ?>">
                            </div>

                            <div class="doctor-content">
                                <div class="doctor-specialty"><?= htmlspecialchars($doctor['specialty'] ?? 'General Practitioner') ?></div>
                                <h3 class="doctor-name">Dr. <?= htmlspecialchars($doctor['username']) ?></h3>

                                <div class="doctor-rating">
                                    <?php
                                    $rating = round($doctor['avg_rating'] * 2) / 2;
                                    for ($i = 1; $i <= 5; $i++) {
                                        if ($i <= $rating) {
                                            echo '<i class="fas fa-star"></i>';
                                        } elseif ($i - 0.5 == $rating) {
                                            echo '<i class="fas fa-star-half-alt"></i>';
                                        } else {
                                            echo '<i class="far fa-star"></i>';
                                        }
                                    }
                                    ?>
                                    <span><?= number_format($doctor['avg_rating'], 1) ?></span>
                                    <div class="doctor-review-count"><?= $doctor['review_count'] ?> reviews</div>
                                </div>

                                <div class="doctor-details">
                                    <div class="doctor-detail-item">
                                        <i class="fas fa-graduation-cap"></i>
                                        <span><?= !empty($doctor['degrees']) ? htmlspecialchars($doctor['degrees']) : 'Medical Degree' ?></span>
                                    </div>

                                    <div class="doctor-detail-item">
                                        <i class="fas fa-clock"></i>
                                        <span><?= !empty($doctor['years_of_experience']) ? htmlspecialchars($doctor['years_of_experience']) . ' years experience' : 'Experience not specified' ?></span>
                                    </div>

                                    <div class="doctor-detail-item">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <span><?= !empty($doctor['work_address']) ? htmlspecialchars($doctor['work_address']) : 'Location not specified' ?></span>
                                    </div>
                                </div>

                                <a href="doctor-profile.php?id=<?= $doctor['id'] ?>" class="view-profile-btn">
                                    View Profile <i class="fas fa-arrow-right"></i>
                                </a>
                            </div>
                        </div>
                    <?php endforeach; ?>
                <?php else: ?>
                    <div class="no-results">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                            <line x1="12" y1="17" x2="12.01" y2="17"></line>
                        </svg>
                        <h3>No doctors found</h3>
                        <p>We couldn't find any doctors matching your symptoms. Please try a different description or use the filters above.</p>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    <?php endif; ?>

    <!-- Regular Search Results -->
    <?php if (isset($doctors) && (!isset($ai_search_results))): ?>
        <div class="results-info">
            <div class="results-count">
                Found <span><?= count($doctors) ?></span> doctors
            </div>
        </div>

        <div class="doctors-grid">
            <?php if (!empty($doctors)): ?>
                <?php foreach ($doctors as $index => $doctor): ?>
                    <div class="doctor-card animate-card" style="animation-delay: <?= ($index * 0.1) ?>s">
                        <div class="doctor-image-container">
                            <img class="doctor-image" src="<?= !empty($doctor['profile_image']) ? 'uploads/' . htmlspecialchars($doctor['profile_image']) : 'assets/img/default-avatar.png' ?>" alt="<?= htmlspecialchars($doctor['username']) ?>">
                        </div>

                        <div class="doctor-content">
                            <div class="doctor-specialty"><?= htmlspecialchars($doctor['specialty'] ?? 'General Practitioner') ?></div>
                            <h3 class="doctor-name">Dr. <?= htmlspecialchars($doctor['username']) ?></h3>

                            <div class="doctor-rating">
                                <?php
                                $rating = round($doctor['avg_rating'] * 2) / 2;
                                for ($i = 1; $i <= 5; $i++) {
                                    if ($i <= $rating) {
                                        echo '<i class="fas fa-star"></i>';
                                    } elseif ($i - 0.5 == $rating) {
                                        echo '<i class="fas fa-star-half-alt"></i>';
                                    } else {
                                        echo '<i class="far fa-star"></i>';
                                    }
                                }
                                ?>
                                <span><?= number_format($doctor['avg_rating'], 1) ?></span>
                                <div class="doctor-review-count"><?= $doctor['review_count'] ?> reviews</div>
                            </div>

                            <div class="doctor-details">
                                <div class="doctor-detail-item">
                                    <i class="fas fa-graduation-cap"></i>
                                    <span><?= !empty($doctor['degrees']) ? htmlspecialchars($doctor['degrees']) : 'Medical Degree' ?></span>
                                </div>

                                <div class="doctor-detail-item">
                                    <i class="fas fa-clock"></i>
                                    <span><?= !empty($doctor['years_of_experience']) ? htmlspecialchars($doctor['years_of_experience']) . ' years experience' : 'Experience not specified' ?></span>
                                </div>

                                <div class="doctor-detail-item">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span><?= !empty($doctor['work_address']) ? htmlspecialchars($doctor['work_address']) : 'Location not specified' ?></span>
                                </div>
                            </div>

                            <a href="doctor-profile.php?id=<?= $doctor['id'] ?>" class="view-profile-btn">
                                View Profile <i class="fas fa-arrow-right"></i>
                            </a>
                        </div>
                    </div>
                <?php endforeach; ?>
            <?php else: ?>
                <div class="no-results">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                        <line x1="12" y1="17" x2="12.01" y2="17"></line>
                    </svg>
                    <h3>No doctors found</h3>
                    <p>We couldn't find any doctors matching your criteria. Please try adjusting your filters.</p>

                    <?php if (!empty($specialty) || !empty($location) || !empty($experience) || !empty($rating)): ?>
                        <div class="applied-filters">
                            <p>You searched with these filters:</p>
                            <ul>
                                <?php if (!empty($specialty)): ?>
                                    <li>Specialty: <?= htmlspecialchars($specialty) ?></li>
                                <?php endif; ?>
                                <?php if (!empty($location)): ?>
                                    <li>Location: <?= htmlspecialchars($location) ?></li>
                                <?php endif; ?>
                                <?php if (!empty($experience)): ?>
                                    <li>Experience: <?= htmlspecialchars($experience) ?>+ years</li>
                                <?php endif; ?>
                                <?php if (!empty($rating)): ?>
                                    <li>Rating: <?= htmlspecialchars($rating) ?>+ stars</li>
                                <?php endif; ?>
                            </ul>
                        </div>
                        <a href="dashboard.php" class="reset-search-btn">
                            <i class="fas fa-redo"></i> Reset Filters
                        </a>
                    <?php endif; ?>
                </div>
            <?php endif; ?>
        </div>
    <?php endif; ?>

    <!-- Loading Overlay -->
    <div class="loading-overlay">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <div class="loading-text">Searching</div>
        </div>
    </div>

    <!-- Back to top button -->
    <div class="back-to-top">
        <i class="fas fa-arrow-up"></i>
    </div>

    <script>
        // Show loading overlay on form submit
        document.getElementById('doctorSearchForm').addEventListener('submit', function() {
            const loadingOverlay = document.querySelector('.loading-overlay');
            loadingOverlay.style.display = 'flex';
            loadingOverlay.style.opacity = '0';

            // Trigger a reflow
            void loadingOverlay.offsetWidth;

            // Start fading in
            loadingOverlay.style.opacity = '1';
        });

        // Also handle loading for AI search form
        document.getElementById('aiDoctorSearchForm').addEventListener('submit', function(e) {
            // Basic validation
            const symptomInput = document.getElementById('aiSymptomInput');
            if (!symptomInput.value.trim()) {
                e.preventDefault();

                // Shake the input to indicate error
                symptomInput.classList.add('shake-error');
                setTimeout(() => {
                    symptomInput.classList.remove('shake-error');
                }, 600);

                // Show error tooltip
                const tooltip = document.createElement('div');
                tooltip.className = 'ai-input-error';
                tooltip.textContent = 'Please describe your symptoms';
                symptomInput.parentNode.appendChild(tooltip);

                setTimeout(() => {
                    tooltip.remove();
                }, 3000);

                return;
            }

            const loadingOverlay = document.querySelector('.loading-overlay');
            const loadingText = document.querySelector('.loading-text');

            // Update loading text for AI search
            loadingText.textContent = 'AI is analyzing your symptoms...';
            loadingText.dataset.text = 'AI is analyzing your symptoms';

            loadingOverlay.style.display = 'flex';
            loadingOverlay.style.opacity = '0';

            // Trigger a reflow
            void loadingOverlay.offsetWidth;

            // Start fading in
            loadingOverlay.style.opacity = '1';

            // Start the loading text animation
            animateLoadingText();
        });
    </script>
</body>

</html>